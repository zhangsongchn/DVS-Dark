// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/data/experimental/snapshot.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdata_2fexperimental_2fsnapshot_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdata_2fexperimental_2fsnapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdata_2fexperimental_2fsnapshot_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_2fexperimental_2fsnapshot_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_tensorflow_2fcore_2fprotobuf_2fdata_2fexperimental_2fsnapshot_2eproto();
namespace tensorflow {
namespace data {
namespace experimental {
class SnapshotMetadataRecord;
class SnapshotMetadataRecordDefaultTypeInternal;
extern SnapshotMetadataRecordDefaultTypeInternal _SnapshotMetadataRecord_default_instance_;
class SnapshotRecord;
class SnapshotRecordDefaultTypeInternal;
extern SnapshotRecordDefaultTypeInternal _SnapshotRecord_default_instance_;
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::data::experimental::SnapshotMetadataRecord* Arena::CreateMaybeMessage<::tensorflow::data::experimental::SnapshotMetadataRecord>(Arena*);
template<> ::tensorflow::data::experimental::SnapshotRecord* Arena::CreateMaybeMessage<::tensorflow::data::experimental::SnapshotRecord>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace data {
namespace experimental {

// ===================================================================

class SnapshotRecord :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.experimental.SnapshotRecord) */ {
 public:
  SnapshotRecord();
  virtual ~SnapshotRecord();

  SnapshotRecord(const SnapshotRecord& from);

  inline SnapshotRecord& operator=(const SnapshotRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotRecord(SnapshotRecord&& from) noexcept
    : SnapshotRecord() {
    *this = ::std::move(from);
  }

  inline SnapshotRecord& operator=(SnapshotRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SnapshotRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotRecord* internal_default_instance() {
    return reinterpret_cast<const SnapshotRecord*>(
               &_SnapshotRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SnapshotRecord* other);
  friend void swap(SnapshotRecord& a, SnapshotRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotRecord* New() const final {
    return CreateMaybeMessage<SnapshotRecord>(nullptr);
  }

  SnapshotRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SnapshotRecord& from);
  void MergeFrom(const SnapshotRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.TensorProto tensor = 1;
  int tensor_size() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 1;
  ::tensorflow::TensorProto* mutable_tensor(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_tensor();
  const ::tensorflow::TensorProto& tensor(int index) const;
  ::tensorflow::TensorProto* add_tensor();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
      tensor() const;

  // @@protoc_insertion_point(class_scope:tensorflow.data.experimental.SnapshotRecord)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > tensor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_2fexperimental_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotMetadataRecord :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.experimental.SnapshotMetadataRecord) */ {
 public:
  SnapshotMetadataRecord();
  virtual ~SnapshotMetadataRecord();

  SnapshotMetadataRecord(const SnapshotMetadataRecord& from);

  inline SnapshotMetadataRecord& operator=(const SnapshotMetadataRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotMetadataRecord(SnapshotMetadataRecord&& from) noexcept
    : SnapshotMetadataRecord() {
    *this = ::std::move(from);
  }

  inline SnapshotMetadataRecord& operator=(SnapshotMetadataRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SnapshotMetadataRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotMetadataRecord* internal_default_instance() {
    return reinterpret_cast<const SnapshotMetadataRecord*>(
               &_SnapshotMetadataRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SnapshotMetadataRecord* other);
  friend void swap(SnapshotMetadataRecord& a, SnapshotMetadataRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotMetadataRecord* New() const final {
    return CreateMaybeMessage<SnapshotMetadataRecord>(nullptr);
  }

  SnapshotMetadataRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotMetadataRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SnapshotMetadataRecord& from);
  void MergeFrom(const SnapshotMetadataRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotMetadataRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string graph_fingerprint = 1;
  void clear_graph_fingerprint();
  static const int kGraphFingerprintFieldNumber = 1;
  const ::std::string& graph_fingerprint() const;
  void set_graph_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_graph_fingerprint(::std::string&& value);
  #endif
  void set_graph_fingerprint(const char* value);
  void set_graph_fingerprint(const char* value, size_t size);
  ::std::string* mutable_graph_fingerprint();
  ::std::string* release_graph_fingerprint();
  void set_allocated_graph_fingerprint(::std::string* graph_fingerprint);

  // string run_id = 2;
  void clear_run_id();
  static const int kRunIdFieldNumber = 2;
  const ::std::string& run_id() const;
  void set_run_id(const ::std::string& value);
  #if LANG_CXX11
  void set_run_id(::std::string&& value);
  #endif
  void set_run_id(const char* value);
  void set_run_id(const char* value, size_t size);
  ::std::string* mutable_run_id();
  ::std::string* release_run_id();
  void set_allocated_run_id(::std::string* run_id);

  // int64 creation_timestamp = 3;
  void clear_creation_timestamp();
  static const int kCreationTimestampFieldNumber = 3;
  ::google::protobuf::int64 creation_timestamp() const;
  void set_creation_timestamp(::google::protobuf::int64 value);

  // bool finalized = 1000;
  void clear_finalized();
  static const int kFinalizedFieldNumber = 1000;
  bool finalized() const;
  void set_finalized(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.data.experimental.SnapshotMetadataRecord)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr graph_fingerprint_;
  ::google::protobuf::internal::ArenaStringPtr run_id_;
  ::google::protobuf::int64 creation_timestamp_;
  bool finalized_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_2fexperimental_2fsnapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnapshotRecord

// repeated .tensorflow.TensorProto tensor = 1;
inline int SnapshotRecord::tensor_size() const {
  return tensor_.size();
}
inline ::tensorflow::TensorProto* SnapshotRecord::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.SnapshotRecord.tensor)
  return tensor_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
SnapshotRecord::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.data.experimental.SnapshotRecord.tensor)
  return &tensor_;
}
inline const ::tensorflow::TensorProto& SnapshotRecord::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotRecord.tensor)
  return tensor_.Get(index);
}
inline ::tensorflow::TensorProto* SnapshotRecord::add_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.data.experimental.SnapshotRecord.tensor)
  return tensor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
SnapshotRecord::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.data.experimental.SnapshotRecord.tensor)
  return tensor_;
}

// -------------------------------------------------------------------

// SnapshotMetadataRecord

// string graph_fingerprint = 1;
inline void SnapshotMetadataRecord::clear_graph_fingerprint() {
  graph_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotMetadataRecord::graph_fingerprint() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.graph_fingerprint)
  return graph_fingerprint_.GetNoArena();
}
inline void SnapshotMetadataRecord::set_graph_fingerprint(const ::std::string& value) {
  
  graph_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.graph_fingerprint)
}
#if LANG_CXX11
inline void SnapshotMetadataRecord::set_graph_fingerprint(::std::string&& value) {
  
  graph_fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.data.experimental.SnapshotMetadataRecord.graph_fingerprint)
}
#endif
inline void SnapshotMetadataRecord::set_graph_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  graph_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.data.experimental.SnapshotMetadataRecord.graph_fingerprint)
}
inline void SnapshotMetadataRecord::set_graph_fingerprint(const char* value, size_t size) {
  
  graph_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.data.experimental.SnapshotMetadataRecord.graph_fingerprint)
}
inline ::std::string* SnapshotMetadataRecord::mutable_graph_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.SnapshotMetadataRecord.graph_fingerprint)
  return graph_fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotMetadataRecord::release_graph_fingerprint() {
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.SnapshotMetadataRecord.graph_fingerprint)
  
  return graph_fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotMetadataRecord::set_allocated_graph_fingerprint(::std::string* graph_fingerprint) {
  if (graph_fingerprint != nullptr) {
    
  } else {
    
  }
  graph_fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.SnapshotMetadataRecord.graph_fingerprint)
}

// string run_id = 2;
inline void SnapshotMetadataRecord::clear_run_id() {
  run_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotMetadataRecord::run_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
  return run_id_.GetNoArena();
}
inline void SnapshotMetadataRecord::set_run_id(const ::std::string& value) {
  
  run_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
}
#if LANG_CXX11
inline void SnapshotMetadataRecord::set_run_id(::std::string&& value) {
  
  run_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
}
#endif
inline void SnapshotMetadataRecord::set_run_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  run_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
}
inline void SnapshotMetadataRecord::set_run_id(const char* value, size_t size) {
  
  run_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
}
inline ::std::string* SnapshotMetadataRecord::mutable_run_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
  return run_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotMetadataRecord::release_run_id() {
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
  
  return run_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotMetadataRecord::set_allocated_run_id(::std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), run_id);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
}

// int64 creation_timestamp = 3;
inline void SnapshotMetadataRecord::clear_creation_timestamp() {
  creation_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SnapshotMetadataRecord::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.creation_timestamp)
  return creation_timestamp_;
}
inline void SnapshotMetadataRecord::set_creation_timestamp(::google::protobuf::int64 value) {
  
  creation_timestamp_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.creation_timestamp)
}

// bool finalized = 1000;
inline void SnapshotMetadataRecord::clear_finalized() {
  finalized_ = false;
}
inline bool SnapshotMetadataRecord::finalized() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.finalized)
  return finalized_;
}
inline void SnapshotMetadataRecord::set_finalized(bool value) {
  
  finalized_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.finalized)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace experimental
}  // namespace data
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdata_2fexperimental_2fsnapshot_2eproto
